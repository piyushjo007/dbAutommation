AWSTemplateFormatVersion: 2010-09-09

Description: 'VPC : public and private in 4 AZ'

Metadata:

  'AWS::CloudFormation::Interface':

    ParameterGroups:

    - Label:

        default: 'VPC Parameters'

      Parameters:

      - ClassB

Parameters :

    ClassB:

        Description: ' Class B of VPC (10.xxx.0.0/16)'

        Type: Number

        Default: 0

        ConstraintDescription: 'Must be in range of [0-255]'

        MinValue: 0

        MaxValue: 255

    

    KeyName:

        Description: 'The Ec2 key pair to allow ssh access'

        Type: 'AWS::EC2::KeyPair::KeyName'

    

    InstanceType:

        Description: 'Type of instance to procured'

        Type: String

        Default: 't3.small'

        AllowedValues:

        -   t3.medium

        -   t3.large

        -   t3.xlarge

        -   m5.large

        -   m5.xlarge

        -   m5.2xlarge

        -   t3.small

        

    

Resources:

    VPC:

        Type: 'AWS::EC2::VPC'

        Properties:

            CidrBlock: !Sub '10.${ClassB}.0.0/16'

            EnableDnsSupport: true

            EnableDnsHostnames: true

            InstanceTenancy: default

            Tags:

            - Key: Name

              Value: !Sub '10.${ClassB}.0.0/16'

    

    InternetGateway:

        Type: 'AWS::EC2::InternetGateway'

        Properties:

            Tags:

            -   Key: Name

                Value: !Sub 10.${ClassB}.0.0/16

    

    VPCGatewayAttachment:

        Type: 'AWS::EC2::VPCGatewayAttachment'

        Properties:

            VpcId: !Ref VPC

            InternetGatewayId: !Ref InternetGateway

    

    SubnetAPublic:

        Type: 'AWS::EC2::Subnet'

        Properties:

            AvailabilityZone: !Select [0, !GetAZs '']

            CidrBlock: !Sub '10.${ClassB}.0.0/20'

            VpcId: !Ref VPC

            Tags:

            -   Key: Name

                Value: 'A public'

            -   Key: Reach

                Value: public

                

    SubnetAPrivate:

        Type: 'AWS::EC2::Subnet'

        Properties:

            AvailabilityZone: !Select [0, !GetAZs '']

            CidrBlock: !Sub '10.${ClassB}.16.0/20'

            VpcId: !Ref VPC

            Tags:

            -   Key: Name

                Value: 'A private'

            -   Key: reach

                Value: private

    

    SubnetBPublic:

        Type: 'AWS::EC2::Subnet'

        Properties:

            AvailabilityZone: !Select [0, !GetAZs '']

            CidrBlock: !Sub '10.${ClassB}.32.0/20'

            VpcId: !Ref VPC

            Tags:

            -   Key: Name

                Value: 'Public B'

            -   Key: reach

                Value: public

                

    SubnetBPrivate:

        Type: 'AWS::EC2::Subnet'

        Properties:

            AvailabilityZone: !Select [0, !GetAZs '']

            CidrBlock: !Sub '10.${ClassB}.48.0/20'

            VpcId: !Ref VPC

            Tags:

            -   Key: Name

                Value: 'B private'

            -   Key: reach

                Value: private

    

    SubnetCPublic:

        Type: 'AWS::EC2::Subnet'

        Properties:

            AvailabilityZone: !Select [0, !GetAZs '']

            CidrBlock: !Sub '10.${ClassB}.64.0/20'

            VpcId: !Ref VPC

            Tags:

            -   Key: Name

                Value: 'Public C'

            -   Key: reach

                Value: public

                

    SubnetCPrivate:

        Type: 'AWS::EC2::Subnet'

        Properties:

            AvailabilityZone: !Select [0, !GetAZs '']

            VpcId: !Ref VPC

            CidrBlock: !Sub '10.${ClassB}.80.0/20'

            Tags:

            -   Key: Name

                Value: 'C private'

            -   Key: Reach

                Value: Private

                

    SubnetDPublic:

        Type: "AWS::EC2::Subnet"

        Properties:

            VpcId: !Ref VPC

            CidrBlock: !Sub '10.${ClassB}.96.0/20'

            AvailabilityZone: !Select [0, !GetAZs '']

            Tags:

            -   Key: Name

                Value: 'D public'

            -   Key: reach

                Value: public

                

    SubnetDPrivate:

        Type: 'AWS::EC2::Subnet'

        Properties:

            AvailabilityZone: !Select [0 , !GetAZs '']

            VpcId: !Ref VPC

            CidrBlock: !Sub '10.${ClassB}.112.0/20'

            Tags:

            -   Key: Name

                Value: 'D Private'

            -   Key: Reach

                Value: Private

                

    RouteTablePublic:

        Type: 'AWS::EC2::RouteTable'

        Properties:

            VpcId: !Ref VPC

            Tags:

            -   Key: Name

                Value: Public

                

    RouteTablePrivate:

        Type: 'AWS::EC2::RouteTable'

        Properties:

            VpcId: !Ref VPC

            Tags:

            -   Key: Name

                Value: Private

                

    RouteTableBPublic:

        Type: 'AWS::EC2::RouteTable'

        Properties:

            VpcId: !Ref VPC

            Tags:

            -   Key: Name

                Value: 'B public RT'

                

    RouteTableBPrivate:

        Type: 'AWS::EC2::RouteTable'

        Properties:

            VpcId: !Ref VPC

            Tags:

            -   Key: Name

                Value: 'B Private RT'

                

    RouteTableCPublic:

        Type: 'AWS::EC2::RouteTable'

        Properties:

            VpcId: !Ref VPC

            Tags:

            -   Key: Name

                Value: 'C public RT'

                

    RouteTableCPrivate:

        Type: 'AWS::EC2::RouteTable'

        Properties:

            VpcId: !Ref VPC

            Tags:

            -   Key: Name

                Value: 'C Private RT'

                

    RouteTableDPublic:

        Type: 'AWS::EC2::RouteTable'

        Properties:

            VpcId: !Ref VPC

            Tags:

            -   Key: Name

                Value: 'D Public RT'

                

    RouteTableDPrivate:

        Type: 'AWS::EC2::RouteTable'

        Properties:

            VpcId: !Ref VPC

            Tags:

            -   Key: Name

                Value: 'D Private RT'

                

# Route table assiciation



    RouteTableAssociationAPublic:

        Type: 'AWS::EC2::SubnetRouteTableAssociation'

        Properties:

            SubnetId: !Ref SubnetAPublic

            RouteTableId: !Ref RouteTablePublic

    

    RouteTableAssociationAPivate:

        Type: 'AWS::EC2::SubnetRouteTableAssociation'

        Properties:

            SubnetId: !Ref SubnetAPrivate

            RouteTableId: !Ref RouteTablePrivate

            

    RouteTableAssociationBPublic:

        Type: 'AWS::EC2::SubnetRouteTableAssociation'

        Properties:

            SubnetId: !Ref SubnetBPublic

            RouteTableId: !Ref RouteTableBPublic

            

    RouteTableAssociationBPrivate:

        Type: 'AWS::EC2::SubnetRouteTableAssociation'

        Properties:

            SubnetId: !Ref SubnetBPrivate

            RouteTableId: !Ref RouteTableBPrivate

            

    RouteTableAssociationCPublic:

        Type: 'AWS::EC2::SubnetRouteTableAssociation'

        Properties:

            SubnetId: !Ref SubnetCPublic

            RouteTableId: !Ref RouteTableCPublic

            

    RouteTableAssociationCPrivate:

        Type: 'AWS::EC2::SubnetRouteTableAssociation'

        Properties:

            SubnetId: !Ref SubnetCPrivate

            RouteTableId: !Ref RouteTableCPrivate

            

    RouteTableAssociationDPublic:

        Type: 'AWS::EC2::SubnetRouteTableAssociation'

        Properties:

            SubnetId: !Ref SubnetDPublic

            RouteTableId: !Ref RouteTableDPublic

            

    RouteTableAssociationDPrivate:

        Type: 'AWS::EC2::SubnetRouteTableAssociation'

        Properties:

            SubnetId: !Ref SubnetDPrivate

            RouteTableId: !Ref RouteTableDPrivate



############# Phase III ###############

#

########################################

# Public internet route



    RouteTablePublicInternetRoute:

        Type: 'AWS::EC2::Route'

        DependsOn: VPCGatewayAttachment

        Properties:

            RouteTableId: !Ref RouteTablePublic

            DestinationCidrBlock: '0.0.0.0/0'

            GatewayId: !Ref InternetGateway

            

    RouteTablePublicBInternetRoute:

        Type: 'AWS::EC2::Route'

        DependsOn: VPCGatewayAttachment

        Properties:

            RouteTableId: !Ref RouteTableBPublic

            DestinationCidrBlock: '0.0.0.0/0'

            GatewayId: !Ref InternetGateway

            

    RouteTablePublicCInternetRoute:

        Type: 'AWS::EC2::Route'

        DependsOn: VPCGatewayAttachment

        Properties:

            RouteTableId: !Ref RouteTableCPublic

            DestinationCidrBlock: '0.0.0.0/0'

            GatewayId: !Ref InternetGateway

            

    RouteTablePublicDInternetRoute:

        Type: 'AWS::EC2::Route'

        DependsOn: VPCGatewayAttachment

        Properties:

            RouteTableId: !Ref RouteTableDPublic

            DestinationCidrBlock: '0.0.0.0/0'

            GatewayId: !Ref InternetGateway

            

 ########### Phase IV #########

 # EC2 Instance 



    AllportSecurityGroup:

        Type: 'AWS::EC2::SecurityGroup'

        Properties:

            VpcId: !Ref VPC

            GroupDescription: 'Allow all to client host'

            SecurityGroupIngress: 

                CidrIp: '0.0.0.0/0'

                Description: 'all inbound'

                ToPort: -1

                FromPort: -1

                IpProtocol: -1

            SecurityGroupEgress:

                CidrIp: '0.0.0.0/0'

                Description: 'all inbound'

                ToPort: -1

                FromPort: -1

                IpProtocol: -1

                

    MyEc2instance:

        Type: 'AWS::EC2::Instance'

        Properties:

            AvailabilityZone:  !Select [0, !GetAZs '']

            ImageId: 'ami-0e34e7b9ca0ace12d'

            SubnetId: !Ref SubnetAPublic

            InstanceType: !Sub ${InstanceType}

            KeyName: !Sub ${KeyName}

            SecurityGroupIds: 

            -   !Ref AllportSecurityGroup

 
